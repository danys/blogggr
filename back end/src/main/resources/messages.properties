exception.other.error = Exceptional error
exception.db.nonTransientExceptionError = Non-transient database error.
exception.db.recoverableExceptionError = Recoverable database error, please retry.
exception.db.scriptExceptionError = Error processing SQL.
exception.db.transientExceptionError = Transient database error, please retry.
exception.db.wrongPasswordError = Credentials not valid!

exception.authentication.userNotFound = Authentication failed: User not found!
exception.authentication.jwtExpired = JWT has expired!
exception.authentication.jwtError = JWT error!
exception.authentication.accessDenied = Access denied: Unauthenticated access not allowed!
exception.controller.noHandlerFound = API method does not exist!
exception.controller.noHandlerFoundHttpVerb = No handler for API method HTTP verb!
exception.controller.servletRequestBindingException = Servlet request binding exception!
exception.controller.conversionNotSupported = Conversion not supported!
exception.controller.typeMismatch = Type mismatch!
exception.controller.httpMessageNotReadable = HTTP message not readable!
exception.controller.httpMessageNotWritable = HTTP message not writable!
exception.controller.methodArgumentNotValid = Method argument not valid!
exception.controller.missingServletRequestPart = Missing servlet request part!
exception.controller.bindException = Bind exception!
exception.controller.asyncRequestTimeoutException = Async request timeout!

typeMismatch.userSearchData.maxRecordsCount = maxRecordsCount must be an integer!
NotNull.userSearchData.maxRecordsCount = maxRecordsCount cannot be null!

NotNull.userPostData.firstName = The first name cannot be null!
Size.userPostData.firstName = The first name length must have between 3 and 100 characters!
NotNull.userPostData.lastName = The last name cannot be null!
Size.userPostData.lastName = The last name length must have between 3 and 100 characters!
NotNull.userPostData.email = The e-mail cannot be null!
Email.userPostData.email = The e-mail must be a valid e-mail address!
Size.userPostData.email = The e-mail length must have between 6 and 100 characters!
NotNull.userPostData.emailRepeat = The repeated e-mail cannot be null!
Email.userPostData.emailRepeat = The repeated e-mail must be a valid e-mail address!
Size.userPostData.emailRepeat = The repeated e-mail length must have between 6 and 100 characters!
NotNull.userPostData.password = The password cannot be null!
Size.userPostData.password = The password length must be between 8 and 100 characters!
NotNull.userPostData.passwordRepeat = The repeated password cannot be null!
Size.userPostData.passwordRepeat = The repeated password length must be between 8 and 100 characters!
NotNull.userPostData.sex = The sex declaration cannot be null!
Enumerated.userPostData.sex = The sex declaration must be either 'm' or 'f'!
NotNull.userPostData.lang = The preferred language cannot be null!
Enumerated.userPostData.lang = The preferred language must be either 'EN', 'DE' or 'FR'!

Size.userPutData.firstName = The first name length must have between 3 and 100 characters!
Size.userPutData.lastName = The last name length must have between 3 and 100 characters!
Email.userPutData.email = The e-mail must be a valid e-mail address!
Size.userPutData.email = The e-mail length must have between 6 and 100 characters!
Email.userPutData.emailRepeat = The repeated e-mail must be a valid e-mail address!
Size.userPutData.emailRepeat = The repeated e-mail length must have between 6 and 100 characters!
Size.userPutData.oldPassword = The old password length must be between 8 and 100 characters!
Size.userPutData.password = The new password length must be between 8 and 100 characters!
Size.userPutData.passwordRepeat = The repeated new password length must be between 8 and 100 characters!
Enumerated.userPutData.lang = The preferred language must be either 'EN', 'DE' or 'FR'!

typeMismatch.commentData.postId = postId must be an integer!
NotNull.commentData.postId = postId cannot be empty!
NotNull.commentData.text = Comment text cannot be empty!
Size.commentData.text = Comment is a little short!

typeMismatch.friendDataBase.userId1 = userId1 must be an integer!
NotNull.friendDataBase.userId1 = userId1 must not be empty!
typeMismatch.friendDataBase.userId2 = userId2 must be an integer!
NotNull.friendDataBase.userId2 = userId2 must not be empty!

typeMismatch.friendDataUpdate.userId1 = userId1 must be an integer!
NotNull.friendDataUpdate.userId1 = userId1 must not be empty!
typeMismatch.friendDataUpdate.userId2 = userId2 must be an integer!
NotNull.friendDataUpdate.userId2 = userId2 must not be empty!
typeMismatch.friendDataUpdate.action = action must be an integer number between 1 and 3!
NotNull.friendDataUpdate.action = action must not be empty!
Min.friendDataUpdate.action = action must be an integer number between 1 and 3!
Max.friendDataUpdate.action = action must be an integer number between 1 and 3!

NotNull.postData.title = title cannot be null!
Size.postData.title = The title must be at least 4 characters long!
NotNull.postData.textBody = The text cannot be empty!
Size.postData.textBody = The text must be at least 10 characters long!
NotNull.postData.isGlobal = The boolean isGlobal flag must be provided!

Size.postDataUpdate.title = The title must be at least 4 characters long!
Size.postDataUpdate.textBody = The text must be at least 10 characters long!

PostController.updatePost.allFieldsNil = At least one field must be non null!
typeMismatch.postSearchData.posterUserId = Poster user Id not a valid number!
Size.postSearchData.title = Title must have a length between 3 and 100 characters!
Enumerated.postSearchData.visibility = Visibility must be either of: 'onlyGlobal', 'all', 'onlyFriends', 'onlyCurrentUser'!
NotNull.postSearchData.maxRecordsCount = maxRecordsCount must not be null!
typeMismatch.postSearchData.maxRecordsCount = maxRecordsCount must be an integer!
typeMismatch.postSearchData.before = before must be an integer!
typeMismatch.postSearchData.after = after must be an integer!

NotNull.simpleUserSearchData.searchString = Search string cannot be empty!
Size.simpleUserSearchData.searchString = The minimum search string size is 3!
NotNull.simpleUserSearchData.limit = Limit cannot be null!
typeMismatch.simpleUserSearchData.limit = Limit must be a valid number!

NotNull.prevNextData.maxRecordsCount = maxRecordsCount cannot be null!
typeMismatch.prevNextData.maxRecordsCount = maxRecordsCount cannot be null!

UsersController.getUsers.afterBeforeBothSet = Provide only after or before key but not both!
PostsController.getPost.titleSizeTooShort = The given title is too short!

NotNull.searchData.maxRecordsCount = maxRecordsCount needs to be provided!

UserImageService.postImage.tooManyTries = Too many tries!
UserImageService.postImage.scalingException = Exception scaling image!
UserImageService.postImage.storageError = Error storing image in the cloud!
UserImageService.postImage.temporaryFileError = Error removing temporary image files
UserImageService.getUserImage.notFoundException = UserImage not found!

FileStorageManager.store.emptyFileNotAcceptableException = Empty files are not accepted:
FileStorageManager.store.failStoreFileException = Failed to store file
FileStorageManager.getImageResourceFromCloud.malformedUrlException = Malformed image cloud URL!
FileStorageManager.getImageResourceFromCloud.unableLoadException = Unable to load file:

CommentService.createComment.commentNotFoundException = Comment not found!
CommentService.createComment.userNotFoundException = User not found!
CommentService.createComment.postNotFoundException = Post not found!
CommentService.createComment.authorizationRestrictionException = User must be friends with poster as post is not globally visible!
CommentService.updateComment.notAuthorized = Not allowed to change comment!
CommentService.deleteComment.notAuthorized = Not allowed to delete comment!
CommentService.getCommentsByPostId.notFound = Did not find post!
CommentService.getCommentsByPostId.notAuthorized = Not allowed to view this post and its comments!

FriendService.createFriend.currentUserNotPresentException = Current user must be a part of the new friendship!
FriendService.createFriend.oneSelfFriendException = Can not be befriended with oneself!
FriendService.friendNotFoundException = Friendship not found!
FriendService.updateFriend.notAuthorizedException = Not authorized to change this friendship!
FriendService.userNotFoundException = User not found!
FriendService.updateFriend.unableUpdateException = Cannot update friend status!
FriendService.deleteFriend.notAuthorizedException = Not authorized to delete friendship!
FriendService.getFriend.notAuthorizedException = Not allowed to view this friendship!

PostService.userNotFound = User not found!
PostService.postNotFound = Post not found!
PostService.notAuthorizedModify = No authorization to modify this post!
PostService.notAuthorizedView = No authorization to view this post!

SessionService.expirationError = Error determining expiration
SessionService.userDisabledError = Please confirm your e-mail!

UserService.createUser.passwordMismatch = The two password fields must have the same value!
UserService.createUser.emailMismatch = The two e-mail fields must have the same value!
UserService.createUser.emailException = Unable to send the registration confirmation e-mail!
UserService.createUser.emailSubject = Blogggr.com - Confirm your registration
UserService.createUser.emailWelcome = Welcome to Blogggr
UserService.createUser.emailConfirmText = Confirm your registration
UserService.createUser.emailClickHere = Click here
UserService.createUser.userExistsException = A user with the given e-mail address exists already!

UserService.userNotFound = User not found!
UserService.userNotFoundShort = not found!
UserService.updateUser.notAuthorizedModify = Not authorized to change this user!
UserService.updateUser.wrongOldPassword = Old password is wrong!
UserService.updateUser.oldPasswordEmpty = Old password must be provided!

UserService.confirmEmail.wrongChallenge = E-mail verification failed: wrong challenge provided!
UserController.confirmEmail.emailOK = E-mail verification succeeded for e-mail {0}!

UserDao.findByIdWithImages.notFound = User not found!
FriendDao.noResult = Did not find any friends!
PostDao.afterBeforeSetException = Cannot set both before and after!
PostDao.nextLimitNullException = Next and limit should not be null!
PostDao.previousLimitNullException = Previous and limit should not be null!

FriendDao.createFriendship.userNull = Persisted user must be provided!
FriendDao.createFriendship.existAlready = Friendship exists already!